import json
import os
from dotenv import load_dotenv
import time
from murf import Murf

# Load environment variables
load_dotenv()

# Initialize Murf client
MURF_API_KEY = os.getenv("MURF_API_KEY")
client = Murf(api_key=MURF_API_KEY)

def generate_audio_from_commentary(json_file_path, output_dir="audio_output"):
    """
    Takes a JSON file containing commentary and generates TTS audio files for each line
    
    Parameters:
    - json_file_path: Path to JSON file generated by video_summarization_backend.py
    - output_dir: Directory where audio files will be saved
    """
    print(f"üé¨ Murf TTS Audio Generator for Video Commentary")
    print("=" * 50)
    
    # Create output directory if it doesn't exist
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
        print(f"Created output directory: {output_dir}")
    
    # Read the JSON file
    try:
        with open(json_file_path, 'r') as f:
            data = json.load(f)
            
        if not data.get('success'):
            print(f"‚ùå Error in JSON file: {data.get('error', 'Unknown error')}")
            return
            
        commentary_data = data['data']
        title = commentary_data['title']
        conversation = commentary_data['conversation']
        
        print(f"‚úÖ Loaded commentary: \"{title}\"")
        print(f"Found {len(conversation)} conversation exchanges")
        print("=" * 50)
        
        # Voice configurations
        funny_voice_config = {
            "voice_id": "en-US-ken",
            "style": "Clown",
            "pitch": 9,
            "rate": 50
        }
        
        informative_voice_config = {
            "voice_id": "bn-IN-abhik", 
            "style": "Conversational",
            "pitch": 0,
            "rate": 10,
            "multi_native_locale": "en-IN"
        }
        
        # Generate a title audio using the informative voice
        print(f"Generating title audio...")
        title_audio_path = os.path.join(output_dir, "00_title.mp3")
        response = client.text_to_speech.generate(
            text=f"Video commentary for: {title}",
            **informative_voice_config
        )
        with open(title_audio_path, 'wb') as audio_file:
            audio_file.write(response.audio_file)
        print(f"‚úÖ Title audio saved to: {title_audio_path}")
        
        # Generate audio for each conversation line
        for i, exchange in enumerate(conversation):
            # Determine voice config based on comment type
            comment_type = exchange['type']
            voice_config = funny_voice_config if comment_type == 'funny' else informative_voice_config
            
            # Format filename with leading zeros for proper ordering
            # Format: 01_funny.mp3, 02_informative.mp3, etc.
            audio_filename = f"{i+1:02d}_{comment_type}.mp3"
            audio_path = os.path.join(output_dir, audio_filename)
            
            print(f"Generating audio {i+1}/{len(conversation)}: {comment_type}")
            
            # Generate TTS audio
            try:
                response = client.text_to_speech.generate(
                    text=exchange['text'],
                    **voice_config
                )
                
                # Save audio file
                with open(audio_path, 'wb') as audio_file:
                    audio_file.write(response.audio_file)
                    
                print(f"‚úÖ Saved: {audio_filename}")
                
                # Brief pause to prevent API rate limiting
                time.sleep(0.5)
                
            except Exception as e:
                print(f"‚ùå Error generating audio for line {i+1}: {str(e)}")
        
        print("\n" + "=" * 50)
        print(f"üéâ Audio generation complete! {len(conversation)} files created in '{output_dir}'")
        print("\nFiles created:")
        print(f"- {title_audio_path} (Title)")
        for i, exchange in enumerate(conversation):
            print(f"- {i+1:02d}_{exchange['type']}.mp3")
            
        # Generate a simple HTML player for previewing
        generate_html_player(output_dir, title, conversation)
            
    except FileNotFoundError:
        print(f"‚ùå Error: JSON file '{json_file_path}' not found")
    except json.JSONDecodeError:
        print(f"‚ùå Error: Invalid JSON in file '{json_file_path}'")
    except Exception as e:
        print(f"‚ùå Unexpected error: {str(e)}")

def generate_html_player(output_dir, title, conversation):
    """Generate a simple HTML file to play the audio files in sequence"""
    html_path = os.path.join(output_dir, "player.html")
    
    html_content = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title} - Commentary</title>
    <style>
        body {{ 
            font-family: Arial, sans-serif; 
            max-width: 800px; 
            margin: 0 auto; 
            padding: 20px;
            background-color: #f5f5f5;
        }}
        h1 {{ color: #333; }}
        .player-container {{
            background-color: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }}
        .commentary-container {{
            background-color: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }}
        .comment {{
            padding: 15px;
            margin-bottom: 10px;
            border-radius: 8px;
        }}
        .funny {{
            background-color: #fff3cd;
            border-left: 5px solid #ffc107;
        }}
        .informative {{
            background-color: #d1ecf1;
            border-left: 5px solid #17a2b8;
        }}
        .controls {{
            margin: 20px 0;
        }}
        button {{
            padding: 8px 16px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-right: 10px;
        }}
        button:hover {{
            background-color: #0069d9;
        }}
        .now-playing {{
            font-weight: bold;
            margin: 15px 0;
        }}
    </style>
</head>
<body>
    <div class="player-container">
        <h1>{title}</h1>
        <div class="controls">
            <button onclick="playAll()">Play All</button>
            <button onclick="stopAll()">Stop</button>
        </div>
        <div id="nowPlaying" class="now-playing">Not playing</div>
        <audio id="audioPlayer" onended="playNext()"></audio>
    </div>
    
    <div class="commentary-container">
        <h2>Commentary Transcript</h2>
"""

    # Add each comment to HTML
    for i, exchange in enumerate(conversation):
        comment_type = exchange['type']
        html_content += f"""        <div class="comment {comment_type}" id="comment-{i+1}" 
            onclick="playSpecific({i+1}, '{comment_type}')">
            <strong>{comment_type.capitalize()}:</strong> {exchange['text']}
        </div>
"""

    # Add JavaScript for playback control
    html_content += """    </div>

    <script>
        const audioPlayer = document.getElementById('audioPlayer');
        const nowPlaying = document.getElementById('nowPlaying');
        let currentIndex = 0;
        let isPlaying = false;
        let audioFiles = ['00_title.mp3'];
        
        // Build the list of audio files
"""

    # Add each audio file to the JavaScript array
    for i, exchange in enumerate(conversation):
        html_content += f"        audioFiles.push('{i+1:02d}_{exchange['type']}.mp3');\n"

    # Complete the HTML
    html_content += """
        function playAll() {
            currentIndex = 0;
            playFile(audioFiles[currentIndex]);
        }
        
        function playNext() {
            if (currentIndex < audioFiles.length - 1) {
                currentIndex++;
                playFile(audioFiles[currentIndex]);
            } else {
                nowPlaying.textContent = "Playback complete";
                isPlaying = false;
            }
        }
        
        function playFile(filename) {
            // Highlight the current comment
            document.querySelectorAll('.comment').forEach(el => el.style.opacity = '0.7');
            if (currentIndex > 0) {
                const commentEl = document.getElementById(`comment-${currentIndex}`);
                if (commentEl) commentEl.style.opacity = '1';
            }
            
            audioPlayer.src = filename;
            audioPlayer.play();
            isPlaying = true;
            
            if (currentIndex === 0) {
                nowPlaying.textContent = "Now playing: Title";
            } else {
                nowPlaying.textContent = `Now playing: Comment ${currentIndex}`;
            }
        }
        
        function stopAll() {
            audioPlayer.pause();
            audioPlayer.currentTime = 0;
            isPlaying = false;
            nowPlaying.textContent = "Stopped";
            document.querySelectorAll('.comment').forEach(el => el.style.opacity = '1');
        }
        
        function playSpecific(index, type) {
            currentIndex = index;
            playFile(`${index.toString().padStart(2, '0')}_${type}.mp3`);
        }
    </script>
</body>
</html>
"""

    with open(html_path, 'w') as f:
        f.write(html_content)
    
    print(f"\n‚úÖ HTML player generated: {html_path}")
    print("Open this file in a browser to play back the commentary")

if __name__ == "__main__":
    print("üéôÔ∏è Murf.ai Video Commentary Generator")
    print("=" * 50)
    
    json_file = input("Enter path to commentary JSON file (default: commentary_output.json): ")
    if not json_file:
        json_file = "commentary_output.json"
    
    output_dir = input("Enter output directory for audio files (default: audio_output): ")
    if not output_dir:
        output_dir = "audio_output"
    
    generate_audio_from_commentary(json_file, output_dir)
